#include <iostream>
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>


const int SCREEN_W = 500;
const int SCREEN_H = 500;
const std::string TITLE = "Pong";


SDL_Window *window = nullptr;
SDL_Surface *screenSurface = nullptr;
SDL_Renderer *renderer = nullptr;

void err(){
	std::cout << "ERROR" << " " << SDL_GetError() << std::endl;
}

// // SDL_Surface* loadSurface( const std::string &path )
// {
// 	//The final optimized image
// 	SDL_Surface* optimizedSurface = nullptr;
// 
// 	//Load image at specified path
// 	SDL_Surface* loadedSurface = IMG_Load( path.c_str() );
// 	if( loadedSurface == nullptr)
// 	{
// 		printf( "Unable to load image %s! SDL_image Error: %s\n", path.c_str(), IMG_GetError() );
// 	}
// 	else
// 	{
// 		//Convert surface to screen format
// 		optimizedSurface = SDL_ConvertSurface( loadedSurface, gScreenSurface->format, nullptr);
// 		if( optimizedSurface == nullptr)
// 		{
// 			printf( "Unable to optimize image %s! SDL Error: %s\n", path.c_str(), SDL_GetError() );
// 		}
// 
// 		//Get rid of old loaded surface
// 		SDL_FreeSurface( loadedSurface );
// 	}
// 
// 	return optimizedSurface;
// }
bool init(){

	bool success = true;

	if(SDL_Init(SDL_INIT_VIDEO) < 0){

		err();
		success = false;

	} else {

		window = SDL_CreateWindow(TITLE.c_str(), SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_W, SCREEN_H,SDL_WINDOW_SHOWN);

		if(window == nullptr){
			err();
			success = false;
		} else {
			int imgflags = IMG_INIT_PNG;

			if(!(IMG_Init(imgflags) & imgflags)){

				err();
				success = false;

			} else {

				screenSurface = SDL_GetWindowSurface(window);
			}

		}
	}
	return true;
}





int main(int argc, char *args[]){
	 	
	 	if(!init()){
	 		// handle initliazie error	
	 	} else {
	 		SDL_SetWindowSize(window,SCREEN_W + 50, SCREEN_H + 50);
	 
	 		renderer = SDL_CreateRenderer(window,-1,SDL_RENDERER_ACCELERATED);
	 
	 
	 		bool quit = false;
	 		SDL_Event e;
	 		while(!quit){
	 
	 			while(SDL_PollEvent(&e) != 0){
	 				if(e.type == SDL_QUIT){
	 					quit = true;
	 				}

					SDL_SetRenderDrawColor(renderer, 255,255,255,255);
					SDL_RenderClear(renderer);
					SDL_SetRenderDrawColor(renderer, 255,0,0,255);
					SDL_Rect rect = {0,0,100,50};
					SDL_RenderFillRect(renderer, &rect);
					SDL_RenderPresent(renderer);
				} 


			}

			SDL_Quit();

			return 0;
		}
}

